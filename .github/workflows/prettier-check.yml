name: Prettier Check

on:
  push:
    branches-ignore:
    - 'dependabot/**'
    - 'staging'
    - 'production'
  workflow_dispatch:


jobs:
  format:
    name: Prettier Format Check
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      files_checked: ${{ steps.format-check.outputs.files_checked }}
      errors: ${{ steps.format-check.outputs.errors }}
      has_issues: ${{ steps.format-check.outputs.has_issues }}
      exit_code: ${{ steps.format-check.outputs.exit_code }}
    steps:
    - name: Check out code
      uses: actions/checkout@v5
      with:
        fetch-depth: 2

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Check Prettier formatting
      id: format-check
      run: |
        # Capture prettier format output and exit code
        set +e
        prettier_output=$(bun run format:check 2>&1)
        prettier_exit_code=$?
        set -e

        echo "exit_code=$prettier_exit_code" >> $GITHUB_OUTPUT

        # Save output to file for debugging
        echo "$prettier_output" > format_output.txt

        # Parse prettier output for statistics
        # Strip ANSI color codes first, then parse
        clean_output=$(echo "$prettier_output" | sed 's/\x1b\[[0-9;]*m//g')

        files_checked=$(echo "$clean_output" | grep "Checked [0-9]* files" | sed 's/Checked \([0-9]*\) files.*/\1/' || echo "0")
        errors=$(echo "$clean_output" | grep "Found [0-9]* errors" | sed 's/Found \([0-9]*\) errors.*/\1/' || echo "0")

        echo "files_checked=$files_checked" >> $GITHUB_OUTPUT
        echo "errors=$errors" >> $GITHUB_OUTPUT

        # Check if there are any issues
        if [ "$prettier_exit_code" -ne 0 ]; then
          echo "has_issues=true" >> $GITHUB_OUTPUT
        else
          echo "has_issues=false" >> $GITHUB_OUTPUT
        fi

  apply-format:
    name: Apply Format
    runs-on: ubuntu-latest
    needs: [ format ]
    if: ${{ needs.format.outputs.has_issues == 'true' }}
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Check out code
      uses: actions/checkout@v5
      with:
        fetch-depth: 2

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Apply Prettier format
      run: bun run format:fix

    - name: Check for changes
      id: git-check
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Configure Git
      if: steps.git-check.outputs.changes == 'true'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Create Pull Request
      if: steps.git-check.outputs.changes == 'true'
      id: create-pr
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'style: apply prettier formatting'
        title: 'style: apply prettier formatting for ${{ github.ref_name }}'
        body: |
          This PR fixes code formatting issues using Prettier.

          Auto-generated by the Prettier Format Check workflow.
        branch: fix/prettier-formatting-${{ github.ref_name }}
        base: ${{ github.ref_name }}
        delete-branch: true

    - name: Fail Workflow After Creating PR
      if: steps.create-pr.outputs.pull-request-url != ''
      run: |
        echo "Prettier formatting issues were found and a PR has been created."
        echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"
        exit 1

  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [ format ]
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Comment on PR with progress
      uses: actions/github-script@v8
      with:
        script: |
          // Get PR number from context or search for PR associated with this branch
          let prNumber = null;

          if (context.issue && context.issue.number) {
            prNumber = context.issue.number;
          } else {
            // For push events, find PR associated with this branch
            try {
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
                state: 'open'
              });

              if (prs.length > 0) {
                prNumber = prs[0].number;
              }
            } catch (error) {
              console.log('No PR found for this branch or error occurred:', error.message);
              return; // Exit if no PR is found
            }
          }

          if (!prNumber) {
            console.log('No PR found to comment on');
            return;
          }

          // Get outputs from format job
          const formatFilesChecked = '${{ needs.format.outputs.files_checked }}';
          const formatErrors = '${{ needs.format.outputs.errors }}';
          const formatHasIssues = '${{ needs.format.outputs.has_issues }}';

          // Calculate overall status
          const formatErrorsCount = parseInt(formatErrors) || 0;
          const overallSuccess = formatHasIssues === 'false';

          let body;

          const timestamp = new Date().toLocaleString();

          const issueIcon = formatErrorsCount > 50 ? '🚨' : formatErrorsCount > 20 ? '⚠️' : formatErrorsCount > 10 ? '🔍' : '🔧';

          const formatStatus = formatErrorsCount > 0 ? '🔴 Issues found' : '✅ Passed';

          const nextSteps = overallSuccess ?
            '### 🎉 All Issues Resolved!\n\nYour code is now **100% clean**! Great job! 🏆' :
            '### 📋 Next Steps\n' +
            'Run the following command to fix format issues:\n```bash\nprettier --write .\n```';

          body = `
          ## ${issueIcon} Prettier Check Report

          <div align="center">

          ### Total Issues Found: **${formatErrorsCount}**

          </div>

          ### 🔧 Format Check Results

          | Metric | Value | Status |
          |--------|-------|--------|
          | 📁 **Files Checked** | ${formatFilesChecked} | ✅ Complete |
          | 🔧 **Format Errors** | ${formatErrorsCount} | ${formatStatus} |

          ${nextSteps}

          <div align="center">
          <sub>🤖 Auto-generated by <strong>Prettier Check</strong> workflow • Last updated: ${timestamp}</sub>
          </div>
          `;

          // Find existing Prettier Check comment and update it, or create new one
          try {
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // Look for existing Prettier Check comment with more specific markers
            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('<!-- prettier-check-comment -->')
            );

            // Add a unique marker to identify our comments
            const bodyWithMarker = '<!-- prettier-check-comment -->\n' + body;

            if (existingComment) {
              console.log(`Updating existing comment ${existingComment.id} on PR ${prNumber}`);
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: bodyWithMarker
              });
            } else {
              console.log(`Creating new comment on PR ${prNumber}`);
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: bodyWithMarker
              });
            }
          } catch (error) {
            console.log('Error managing PR comment:', error.message);
          }
